{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "anyOf": [
    {
      "type": "object",
      "required": [
        "update_config"
      ],
      "properties": {
        "update_config": {
          "type": "object",
          "properties": {
            "fair_distribution_code_id": {
              "type": [
                "integer",
                "null"
              ],
              "format": "uint64",
              "minimum": 0.0
            },
            "owner": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "create_fair_distribution_offering"
      ],
      "properties": {
        "create_fair_distribution_offering": {
          "$ref": "#/definitions/FairDistributionInstantiateMsg"
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "FairDistributionInstantiateMsg": {
      "type": "object",
      "required": [
        "allowed_allocation_per_wallet_with_bonded_stt",
        "liquidity",
        "max_max_price",
        "max_order_size",
        "max_orders_per_wallet",
        "min_bond_stt",
        "oracle_address",
        "owner",
        "pair_swap_fee",
        "place_order_fee",
        "ste_gateway_address",
        "vesting_duration"
      ],
      "properties": {
        "allowed_allocation_per_wallet_with_bonded_stt": {
          "$ref": "#/definitions/Uint128"
        },
        "liquidity": {
          "$ref": "#/definitions/Liquidity"
        },
        "max_max_price": {
          "$ref": "#/definitions/Uint128"
        },
        "max_order_size": {
          "$ref": "#/definitions/Uint128"
        },
        "max_orders_per_wallet": {
          "$ref": "#/definitions/Uint128"
        },
        "min_bond_stt": {
          "$ref": "#/definitions/Uint128"
        },
        "oracle_address": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "pair_swap_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "place_order_fee": {
          "$ref": "#/definitions/Uint128"
        },
        "ste_gateway_address": {
          "type": "string"
        },
        "vesting_duration": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Liquidity": {
      "type": "object",
      "required": [
        "token_address",
        "token_amount",
        "ust_amount"
      ],
      "properties": {
        "token_address": {
          "type": "string"
        },
        "token_amount": {
          "$ref": "#/definitions/Uint128"
        },
        "ust_amount": {
          "$ref": "#/definitions/Uint128"
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
